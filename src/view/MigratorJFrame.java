/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ImportController;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import model.ConnectionParameters;
import model.DisplayScreen;
import org.apache.commons.lang3.StringUtils;
import model.Location;

/**
 *
 * @author The Bright
 */
public class MigratorJFrame extends javax.swing.JFrame implements DisplayScreen {

    /**
     * @return the username
     */
    public String getUsername() {
        return username;
    }

    /**
     * @param username the username to set
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * @return the pass
     */
    public String getPass() {
        return password;
    }

    /**
     * @param pass the pass to set
     */
    public void setPass(String pass) {
        this.password = pass;
    }

    /**
     * @return the port
     */
    public String getPort() {
        return port;
    }

    /**
     * @param port the port to set
     */
    public void setPort(String port) {
        this.port = port;
    }

    /**
     * @return the hostIP
     */
    public String getHostIP() {
        return hostIP;
    }

    /**
     * @param hostIP the hostIP to set
     */
    public void setHostIP(String hostIP) {
        this.hostIP = hostIP;
    }

    /**
     * @return the database
     */
    public String getDatabase() {
        return database;
    }

    /**
     * @param database the database to set
     */
    public void setDatabase(String database) {
        this.database = database;
    }
    private String username;
    private String password;
    private String port;
    private String hostIP;
    private String database;
    private String importType;
    private String xmlFileName;
    private File xmlFile;
    private Location loc;
    private ImportController ctr;
    private List<String> errorList;
    private JFileChooser fc=new JFileChooser();
    private Task task;
    private ValidateRunner vrunner;
    

    /**
     * Creates new form MigratorJFrame
     */
    public MigratorJFrame() {
        initComponents();
        ctr = new ImportController();
        ctr.registerDisplay(this);
        errorList = new ArrayList<>();
        usernameField.setText("openmrs");
        passwordField.setText("ck9RdGyz&jXR");
        databaseField.setText("openmrs");
        hostField.setText("192.168.40.221");
        portField.setText("3316");
        xmlFileField.setText("C:\\Users\\Bright\\Desktop\\PROJECTS\\DATA EXPORTS\\NASARAWA\\PHCC Doma Town March 2017\\DATA WAREHOUSE201704051019\\demographics.xml");
        importTypeCombo.setModel(ctr.getTemplateTypeModel());
        importTypeCombo.setSelectedIndex(1);

    }

    public boolean validateImportParameters() {
        boolean ans = true;
        errorList.clear();
        if (xmlFileName.isEmpty()) {
            errorList.add("No file selected");
            ans = false;
        }
        if (importType.isEmpty()) {
            errorList.add("XML file type missing");
            ans = false;
        }
        return ans;
    }
    public boolean validateConnectionInputs() {
        boolean ans = true;
        errorList.clear();
        if (username.isEmpty()) {
            ans = false;
            errorList.add("Username is missing");
        }
        if (password.isEmpty()) {
            ans = false;
            errorList.add("Password is missing");
        }
        if (port.isEmpty()) {
            ans = false;
            errorList.add("MySQL port is missing");
        }
        if (database.isEmpty()) {
            ans = false;
            errorList.add("Database is missing");
        }
        if (hostIP.isEmpty()) {
            ans = false;
            errorList.add("Host is missing");
        }
        return ans;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        hostField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        databaseField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        importTypeCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        xmlFileField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        locationJCombo = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        migrateButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        validateButton = new javax.swing.JButton();
        errorLogButton = new javax.swing.JButton();
        connectionButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        statusProgressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        aboutMenuItem = new javax.swing.JMenu();
        tutorialMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DataMigrator");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("NMRS Server Parameters"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Host IP");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Username");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Password");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Port No");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Database");

        passwordField.setText("jPasswordField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameField)
                    .addComponent(hostField)
                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hostField, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("OMRS CSV"));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Import Type");

        importTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("XML File");

        xmlFileField.setToolTipText("Browse to XML file for import");
        xmlFileField.setMaximumSize(new java.awt.Dimension(6, 22));
        xmlFileField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                xmlFileFieldMouseClicked(evt);
            }
        });
        xmlFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlFileFieldActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Facility");

        locationJCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(importTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(locationJCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(xmlFileField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importTypeCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(xmlFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationJCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap())
        );

        migrateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        migrateButton.setText("MIGRATE");
        migrateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                migrateButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        validateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        validateButton.setText("VALIDATE");
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        errorLogButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorLogButton.setText("ERROR LOG");

        connectionButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        connectionButton.setText("CONNECT");
        connectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(connectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(errorLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(migrateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(validateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(validateButton)
                        .addComponent(migrateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(errorLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {exitButton, migrateButton, validateButton});

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NMRS MIGRATOR UTILITY 1.0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                .addContainerGap())
        );

        statusLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aboutMenuItem.setText("Help");

        tutorialMenuItem.setText("Tutorials");
        aboutMenuItem.add(tutorialMenuItem);

        jMenuItem2.setText("About");
        aboutMenuItem.add(jMenuItem2);

        jMenuBar1.add(aboutMenuItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 161, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(statusProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   class Task extends Thread{
        @Override
        public void run(){
            doInBackground();
            done();
        }

        protected Void doInBackground() {
            //locationCombo.setSelectedIndex(selectedIndex);
            validateButton.setEnabled(false);
            connectionButton.setEnabled(false);
            errorLogButton.setEnabled(false);
            exitButton.setEnabled(false);
            migrateButton.setEnabled(false);
            passwordField.setEnabled(false);
            portField.setEnabled(false);
            databaseField.setEnabled(false);
            usernameField.setEnabled(false);
            hostField.setEnabled(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getConnectionInputs();
            getImportFileParameter();
            ctr.migrate(xmlFileName, importType, loc.getLocationID());

          
            return null;
        }

        protected void done() {
            Toolkit.getDefaultToolkit().beep();
            validateButton.setEnabled(true);
            connectionButton.setEnabled(true);
            errorLogButton.setEnabled(true);
            exitButton.setEnabled(true);
            migrateButton.setEnabled(true);
            passwordField.setEnabled(true);
            portField.setEnabled(true);
            usernameField.setEnabled(true);
            databaseField.setEnabled(true);
            hostField.setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            setCursor(null);
            statusProgressBar.setValue(statusProgressBar.getMaximum());

        }
    }
    class ValidateRunner extends Thread{
        @Override
        public void run(){
            doInBackground();
            done();
        }
        public Void doInBackground(){
            validateButton.setEnabled(false);
            connectionButton.setEnabled(false);
            errorLogButton.setEnabled(false);
            exitButton.setEnabled(false);
            migrateButton.setEnabled(false);
            passwordField.setEnabled(false);
            portField.setEnabled(false);
            databaseField.setEnabled(false);
            usernameField.setEnabled(false);
            hostField.setEnabled(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getConnectionInputs();
            getImportFileParameter();
            if (validateImportParameters()) {
                ctr.validate(xmlFileName, importType);
            } else {
                printErrors();
            }
            return null;
        }
        public void done(){
            Toolkit.getDefaultToolkit().beep();
            
            validateButton.setEnabled(true);
            connectionButton.setEnabled(true);
            errorLogButton.setEnabled(true);
            exitButton.setEnabled(true);
            migrateButton.setEnabled(true);
            passwordField.setEnabled(true);
            portField.setEnabled(true);
            databaseField.setEnabled(true);
            usernameField.setEnabled(true);
            hostField.setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            setCursor(null);
            statusProgressBar.setValue(statusProgressBar.getMaximum());
        }
    }


    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        vrunner=new ValidateRunner();
        vrunner.start();
    }//GEN-LAST:event_validateButtonActionPerformed
    
    private void migrateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_migrateButtonActionPerformed
          task=new Task();
          task.start();
    }//GEN-LAST:event_migrateButtonActionPerformed

    private void connectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionButtonActionPerformed
        ConnectionParameters con = null;
        getConnectionInputs();
        if (validateInput()) {
            con = new ConnectionParameters();
            con.setDatabase(database);
            con.setHostIP(hostIP);
            con.setPassword(password);
            con.setUsername(username);
            con.setPortNo(port);
            if (ctr.connect(con)) {
                showSuccess("Connection successfull");
                locationJCombo.setModel(ctr.getlocationComboModel());
                
            } else {
                showError("Connection failed");
            }
        } else {
            printErrors();
        }

    }//GEN-LAST:event_connectionButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
        ctr.closeConnection();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void xmlFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlFileFieldActionPerformed
        
    }//GEN-LAST:event_xmlFileFieldActionPerformed

    private void xmlFileFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xmlFileFieldMouseClicked
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.xmlFile= file;
            xmlFileField.setText(file.getAbsolutePath());
        } else {
            showError("Open command cancelled by user");
        }
    }//GEN-LAST:event_xmlFileFieldMouseClicked
    public void printErrors() {
        String msg = "<html><body>";
        if (!errorList.isEmpty()) {
            for (String ele : errorList) {
                msg += ele + "</br>";
            }
        }
        msg += "</body></html>";
        showError(msg);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MigratorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MigratorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MigratorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MigratorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MigratorJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenuItem;
    private javax.swing.JButton connectionButton;
    private javax.swing.JTextField databaseField;
    private javax.swing.JButton errorLogButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField hostField;
    private javax.swing.JComboBox<String> importTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox<String> locationJCombo;
    private javax.swing.JButton migrateButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JProgressBar statusProgressBar;
    private javax.swing.JMenuItem tutorialMenuItem;
    private javax.swing.JTextField usernameField;
    private javax.swing.JButton validateButton;
    private javax.swing.JTextField xmlFileField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void showSuccess(String msg) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Font font = new Font("Monospaced", Font.BOLD, 11);
                statusLabel.setFont(font);
                statusLabel.setForeground(Color.BLUE);
                statusLabel.setText(msg);
            }
        });
    }

    public void getConnectionInputs() {
        setUsername(usernameField.getText().trim());
        password = new String(passwordField.getPassword());
        setPort(portField.getText().trim());
        setDatabase(databaseField.getText().trim());
        hostIP = hostField.getText().trim();
    }
     public void getImportFileParameter() {
        xmlFileName = xmlFileField.getText();
        importType = (String) importTypeCombo.getSelectedItem();
        loc = (Location) locationJCombo.getSelectedItem();
    }

    public boolean validateInput() {
        errorList.clear();
        boolean ans = true;
        if (StringUtils.isEmpty(username)) {
            ans = false;
            errorList.add("Username is empty");
        }
        if (StringUtils.isEmpty(password)) {
            ans = false;
            errorList.add("Password field is empty");
        }
        if (StringUtils.isEmpty(port)) {
            ans = false;
            errorList.add("Port field is empty");
        }
        if (StringUtils.isEmpty(hostIP)) {
            ans = false;
            errorList.add("Host IP is missing");
        }
        if (StringUtils.isEmpty(database)) {
            ans = false;
            errorList.add("Database name is missing");
        }

        return ans;
    }

    @Override
    public void showError(String msg) {
        
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Font font = new Font("Monospaced", Font.BOLD, 11);
                statusLabel.setFont(font);
                statusLabel.setForeground(Color.RED);
                statusLabel.setText(msg);
            }
        });
    }

    @Override
    public void updateStatus(String msg) {
         SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Font font = new Font("Monospaced", Font.BOLD, 11);
                statusLabel.setFont(font);
                statusLabel.setForeground(Color.BLUE);
                statusLabel.setText(msg);
            }
        });
    }

    @Override
    public void clear() {
        statusLabel.setText("");
    }

    @Override
    public void updateProgress(int i) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                statusProgressBar.setValue(i);
            }
        });
    }

    @Override
    public void updateMinMaxProgress(int min, int max) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                statusProgressBar.setMinimum(min);
                statusProgressBar.setMaximum(max);
            }
        });
    }

    @Override
    public void setState(final boolean state) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                statusProgressBar.setIndeterminate(state);

            }
        });
    }
}
